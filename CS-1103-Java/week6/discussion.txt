Socket and ServerSocket are two important and fundamental classes in Java that facilitate communication between client and server applications.
A socket is an endpoint that enables communication between two systems over a network, while a ServerSocket is a class that provides a mechanism for server-side applications to listen for and accept incoming client connections.

The primary difference between a Socket and a ServerSocket is that a Socket is used by a client application to connect to a server, while a ServerSocket is used by a server
application to listen for and accept incoming connections from client applications.

To handle a Socket, the client application needs to perform the following three basic steps
    1.creating a socket object,
    2.establishing a connection with the server using the socket object,
    3.and exchanging data with the server over the established connection

I will show you the demonstration of the creating of socket and establishing the connection with the server below.

try {
    Socket socket = new Socket("x.x.x.x", xxxx)
} catch (IOException e) {
    // Handle exceptions
}


Another difference between the two classes is the way they handle connections. A Socket can be used to send and
receive data multiple times, while a ServerSocket can only accept one connection
at a time. Once a connection is accepted, a new Socket object is created to handle the communication between the server and the client.
And I will show you how the server socket is being built below.

try {
    ServerSocket serverSocket = new ServerSocket(xxxx);
    Socket clientSocket = serverSocket.accept();
} catch (IOException ex) {
    System.out.println(ex.getMessage());
}

Sockets and ServerSockets are both really important classes in network programming. Sockets are used by both clients and servers to send and
receive data, while ServerSockets are only used by servers to listen for incoming connections.
